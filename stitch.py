from operator import itemgetter
import sys
import os
from windows import *
import pprint
import bson
import ast
import json

def usage():
    print 'usage: python parser.py log-directory'
    sys.exit(1)

def main():
    if len(sys.argv) != 2:
        usage()

    #list of events
    events = list()

    #directory of bson log files
    directory = sys.argv[1]

    for file in os.listdir(directory):

        fn = os.path.join(directory, file)

        newfn = fn + '-modified'

        # If the new datafile already exists, remove it
        if os.path.exists(newfn):
            os.remove(newfn)

        with open(fn, 'rb') as fr:
            for line in fr:
                if 'BSON\n' == line:
                    continue

                if 'BSON\n' in line:
                    line = line[:-5]

                with open(newfn,'ab') as fa:
                    fa.write(line)


        mon = WindowsMonitor()
        mon.matched = True

        # Parse BSON file
        rv = mon.parse(newfn)

        # Print each system event
        for e in rv:
            events.append(e)

        # Remove temporary BSON file
        os.remove(newfn)

    #sort list based off of times, creating stitched log
    log = sorted(events, key=itemgetter('time'))

    #create final file
    ff = os.path.join(directory, directory + '-combined.json')

    # If the new datafile already exists, remove it
    if os.path.exists(ff):
        os.remove(ff)

    #write to final file
    with open(ff, 'a') as f:

        #dump onto each line
        for line in log:
            f.write(str(line) + '\n')

            #bson implementation? write via encoding to bson instead of writing string?
            #f.write(bson.BSON.encode(line) + '\n')



if __name__ == '__main__':
    main()
