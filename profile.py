import datetime
import json
import ast
import sys
import pprint
import os
import itertools

class osObject(object):

    def __init__(self, type, object_name):
        self.type = type
        self.object_name = object_name

    def osPrint(self):
        print(self.type, self.object_name)

    def compare(self, new_obj):
        if self.type == new_obj.type and self.object_name == new_obj.object_name:
            return True
        return False

    def profile(self):
        temp = list()
        temp.append(self.type)
        temp.append(self.object_name)
        return temp

class osOperation(object):

    def __init__(self, operation_name, operation_attributes, return_value):
        self.operation_name = operation_name
        self.operation_attributes = operation_attributes
        self.return_value = return_value

    def osPrint(self):
        print(self.operation_name, self.operation_attributes, self.return_value)

    def compare(self, new_op):
        if self.operation_name == new_op.operation_name and self.operation_attributes == new_op.operation_attributes and self.return_value == new_op.return_value:
            return True
        return False

    def profile(self):
        temp = list()
        temp.append(self.operation_name)
        temp.append(self.operation_attributes)
        temp.append(self.return_value)
        return temp


def usage():
    print 'python parse-json.py file-path'
    sys.exit(1)

counted = list()

def main():
    if len(sys.argv) != 2:
        usage()

    #dictionary of api categories with associated api calls
    api_categories = dict()

    #set of OS Object Objects
    os_objects = list()

    #set of OS Operation objects
    os_operations = list()

    #load in api category data from types directory
    for file in os.listdir("./labeling/types"):

        #get category key
        key = file[:len(file)-4]


        #initialize values list
        api_values = list()

        #set path to file
        path = os.path.join("./labeling/types", file)

        #open file and read in arguments
        with open(path, "r") as fopen:
            for line in fopen:
                api_values.append(line.strip())

        api_categories[key] = api_values

    #create list of verbs for OS Operations
    operation_verbs = list()

    #read in list of OS Operation verbs
    with open("./labeling/op_verbs.txt") as verblist:
        for verb in verblist:
            operation_verbs.append(verb.strip())

    #open file
    with open(sys.argv[1], 'r') as file:

        #parse lines in file
        for line in file:
            if not line.strip():
                continue

            #convert line to appropriate dict entry
            item = eval(ast.literal_eval(json.dumps(line, ensure_ascii=False).encode('utf8')))

            #skip entry if no api call present
            if 'api' not in item:
                continue

            #store name of api call
            key = item['api']

            if key not in counted:
                counted.append(key)

            #set boolean value for finding key amongst categories
            found = False

            #check api call against category
            for category in api_categories:
                if key in api_categories[category]:
                    found = category
                    break
                elif key[:len(key)-1] in api_categories[category]:
                    found = category
                    break

            if not found:
                continue

            #os object name list
            obj_names = list()

            #os operation attributes list
            obj_attributes = list()

            #boolean for if an object should be added
            to_add = False

            #check for hexadecimal argument
            for each in item['arguments']:
                if (type(item['arguments'][each]) is str and item['arguments'][each][:2] == '0x') or item['arguments'][each] == 0:
                    continue

                #add in non-hexadecimal arguments
                else:
                    to_add = True
                    obj_names.append(each.encode("utf-8"))
                    if not type(item['arguments'][each]) is int:
                        obj_attributes.append(item['arguments'][each].encode("utf-8"))
                    else:
                        obj_attributes.append(item['arguments'][each])

            #if only hexadecimal argument values are found, skip event
            if not to_add:
                continue

            #otherwise, add it
            else:

                #create new object
                new_obj = osObject(found, obj_names)

                #set add to object list param = true
                add = True

                #make sure a duplicate isn't being added
                for obj in os_objects:
                    if obj.compare(new_obj):
                        add = False
                        break
                if add:
                    os_objects.append(new_obj)

                #for checking against verbs
                found = False

                #check operation verbs for os operation name
                for op in operation_verbs:
                    if op in str.lower(key.encode("utf-8")):
                        found = True
                        new_op = osOperation(op, obj_attributes, item['return_value'])
                        break

                #there are 6 API call cases of "other" operaiton name
                if not found:
                    new_op = osOperation("other", obj_attributes, item['return_value'])

                #check operation list for duplicates
                add_op = True
                for op in os_operations:
                    if op.compare(new_op):
                        add_op = False
                if add_op:
                    os_operations.append(new_op)

    os_obj_vals = list()
    for each in os_objects:
        os_obj_vals.append(each.profile())

    os_op_vals = list()
    for each in os_operations:
        os_op_vals.append(each.profile())



    #set product value of O X OP
    gamma = list(itertools.product(os_obj_vals, os_op_vals))

    #set product value of ((O X OP) X (O X OP))
    delta = list(itertools.product(gamma, gamma))

    print(" ")
    print(" ")
    print("OS Object ::= (type, [object-names])")
    print(" type ::= dll|file|hook|network|object|process|")
    print("          registry|service|sync|system-info|time")
    print(" ")
    print("++++++++++++++++++++++++++++")
    for each in os_objects:
        each.osPrint()
    print("++++++++++++++++++++++++++++")
    print(" ")
    print("OS Operation ::= (operation-name, [operation-attributes], return_value)")
    print(" ")
    print("++++++++++++++++++++++++++++")
    for each in os_operations:
        each.osPrint()
    print("++++++++++++++++++++++++++++")
    print(" ")
    print("Gamma = ( O X OP )")
    print(" ")
    print("++++++++++++++++++++++++++++")
    for each in gamma:
        print(each)
    print("++++++++++++++++++++++++++++")
    print(" ")
    print("Delta = (( O X OP ) X ( O X OP ))")
    print(" ")
    print("++++++++++++++++++++++++++++")
    for each in delta:
        print(each)




if __name__ == '__main__':
    main()
